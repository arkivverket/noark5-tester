#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Extract data from Request Tracker and save it as Noark 5 extraction XML.

Proposed mapping

RT instance = arkiv
RT queue = arkivdel
RT ticket = mappe
  ticket subject = mappe.tittel
RT event = registrering
RT attachment = dokumentobjekt

Everything downloaded from the REST API is stored as documents in the
extraction.

The RT REST API is documented on
https://rt-wiki.bestpractical.com/wiki/REST .  Here is a relevant list
of endpoints.

 * /REST/1.0/ticket/<ticket-id>/show
 * /REST/1.0/ticket/<ticket-id>/attachments
 * /REST/1.0/ticket/<ticket-id>/attachments/<attachment-id
 * /REST/1.0/ticket/<ticket-id>/attachments/<attachment-id>/content>
 * /REST/1.0/ticket/<ticket-id>/history
 * /REST/1.0/ticket/<ticket-id>/history/id/<history-id>
 * /REST/1.0/search/ticket?query=<query>&orderby=<sort-order>&format=<format>

"""

from __future__ import print_function

import sys
sys.path.append('lib')

import argparse
import dateutil.parser
import hashlib
import json
import lxml.builder
import lxml.etree
import os
import rt

class Document(object):
    def __init__(self, path, name, mimetype=None):
        self.path = path
        self.name = name
        self.mimetype = mimetype
        self.filesize = os.path.getsize(path)

        hash_sha256 = hashlib.sha256()
        with open(path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
        self.sha256 = hash_sha256.hexdigest()
        self.format = 'ukjent'

class RTExtract(object):
    def __init__(self):
        self.baseurl = "https://rt.nuug.no/"
        self._tickets = {}

        parser = argparse.ArgumentParser()
        parser.add_argument("--baseurl", help="URL to RT site (default is %s)" % self.baseurl)
        parser.add_argument("--verbose", help="enable debug output",
                            action="store_true")
        parser.add_argument("--username", help="RT user to log in as")
        parser.add_argument("--password", help="RT user password to use for authentication")
        parser.add_argument("--targetpath", help="store extraction in path",
                            default='arkivstruktur')
        self.args = parser.parse_args()

        if self.args.baseurl:
            self.baseurl = args.baseurl

        self.rt = rt.Rt(self.baseurl + 'REST/1.0/')

        self._attachments = {}
        self._events = {}


    def mkpath(self, name):
        return "%s/dokumentfil/%s" % (self.args.targetpath, name)


    def _save(self, ticket_id, name, data, mimetype=None):
        filename = self.mkpath(name)
        if dict == type(data) or list == type(data):
            data = json.dumps(data)
            mimetype="application/json"
        with open(filename, 'w') as f:
            f.write(data)
        if ticket_id not in self._attachments:
            self._attachments[ticket_id] = {}
        self._attachments[ticket_id][name] = Document(filename, name, mimetype=mimetype)


    def extract_ticket(self, ticket_id):
        print("fetch ticket %d" % ticket_id)
        t = self.rt.get_ticket(ticket_id)
        self._save(ticket_id, 'ticket-%d-details' % ticket_id, t)
        print(t)

        attachments = self.rt.get_attachments(ticket_id)
        self._save(ticket_id, 'ticket-%d-attachments' % (ticket_id), attachments)
        print(attachments)
        h = self.rt.get_history(ticket_id, transaction_id=None)
        self._save(ticket_id, 'ticket-%d-history' % ticket_id, h)

        if t['Queue'] not in self._tickets:
            self._tickets[t['Queue']] = {}
        self._tickets[t['Queue']][ticket_id] = (t, h, attachments)

        for attachment_id, name, mimetype, size in attachments:
            print(mimetype)
            attachment_id = int(attachment_id)
            a = self.rt.get_attachment(ticket_id, attachment_id)
            try:
                convertable = a['Content'].decode('UTF-8')
            except:
                # Binary / unrepresentable as UTF-8, drop it and only
                # store the content as separate file
                a['Content'] = '[separate binary file]'
            print(a)
            self._save(ticket_id, 'ticket-%d-attachment-%d-metadata' % (ticket_id, attachment_id), a)
            c = self.rt.get_attachment_content(ticket_id, attachment_id)
            self._save(ticket_id, 'ticket-%d-attachment-%d' % \
                       (ticket_id, attachment_id), c)


    def extract(self):
        print("logging in")
        if not self.rt.login(self.args.username, self.args.password):
            print("Unable to log in to RT")
            return

        ids = (
            21407, # only text
            20318, # with PDF
        )
        for ticket_id in ids:
            self.extract_ticket(ticket_id)


    def xmlexport(self):
        class XMLNamespace:
            noark = "http://www.arkivverket.no/standarder/noark5/arkivstruktur"
            xsi = "http://www.w3.org/2001/XMLSchema-instance"

        E = lxml.builder.ElementMaker(
            nsmap={
                None: XMLNamespace.noark,
                'xsi': XMLNamespace.xsi
            }
        )

        arkiv = E.arkiv(
            E.systemID(self.baseurl),
        )

        for queue in self._tickets.keys():
            arkivdel = E.arkivdel(E.tittel(queue))
            for ticket_id in self._tickets[queue].keys():
                t, h, attachments = self._tickets[queue][ticket_id]
                mappe = E.mappe()
                mappeid = '%sTicket/Display.html?id=%d' % (self.baseurl, ticket_id)
                mappe.append(E.systemID(mappeid))
                mappe.append(E.mappeID(str(ticket_id)))
                mappe.append(E.tittel(t['Subject']))
                mappe.append(E.opprettetDato(str(t['Created'])))
                # FIXME requestor is not really creator.  creator need
                # to be found in history
                for r in t['Requestors']:
                    mappe.append(E.opprettetAv(r))

                reg = E.registrering(
                    E.systemID('ticket-%d-attachments' % ticket_id),
                )
                docs = self._attachments[ticket_id]
                for f in docs.keys():
                    d = docs[f]
                    shortpath = d.path.lstrip(self.args.targetpath + '/')
                    db = E.dokumentbeskrivelse(
                        E.tittel(d.name),
                        E.dokumentobjekt(
                            E.filstoerrelse(str(d.filesize)),
                            E.format(d.format),
#                            E.opprettetAv(''),
#                            E.opprettetDato(''),
                            E.referanseDokumentfil(shortpath),
                            E.sjekksum(d.sha256),
                            E.sjekksumAlgoritme('SHA-256'),
                            E.variantformat('Produksjonsformat'),
                            E.versjonsnummer('1'),
                        ),
                    )
                    reg.append(db)

                reg.attrib['{%s}type' % XMLNamespace.xsi] = 'journalpost'
                mappe.append(reg)
                arkivdel.append(mappe)
            arkiv.append(arkivdel)

        with open('%s/arkivstruktur.xml' % self.args.targetpath, 'w') as f:
            f.write(lxml.etree.tostring(arkiv,
                                  pretty_print=True,
                                  xml_declaration=True,
                                  encoding='UTF-8'))


def main():
    rt = RTExtract()
    rt.extract()
    rt.xmlexport()

if __name__ == '__main__':
    exit(main())

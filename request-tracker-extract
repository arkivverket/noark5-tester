#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Extract data from Request Tracker and save it as Noark 5 extraction XML.

Proposed mapping

RT instance = arkiv
RT queue = arkivdel
RT ticket = mappe
  ticket subject = mappe.tittel
RT event = registrering
RT attachment = dokumentobjekt

Everything downloaded from the REST API is stored as documents in the
extraction.

The RT REST API is documented on
https://rt-wiki.bestpractical.com/wiki/REST .  Here is a relevant list
of endpoints.

 * /REST/1.0/ticket/<ticket-id>/show
 * /REST/1.0/ticket/<ticket-id>/attachments
 * /REST/1.0/ticket/<ticket-id>/attachments/<attachment-id
 * /REST/1.0/ticket/<ticket-id>/attachments/<attachment-id>/content>
 * /REST/1.0/ticket/<ticket-id>/history
 * /REST/1.0/ticket/<ticket-id>/history/id/<history-id>
 * /REST/1.0/search/ticket?query=<query>&orderby=<sort-order>&format=<format>

"""

from __future__ import print_function

import sys
sys.path.append('lib')

import argparse
import lxml.builder
import lxml.etree
import mechanize
import dateutil.parser
import shutil

class Document(object):
    def __init__(self, path, name, mimetype=None):
        self.path = path
        self.name = name
        self.mimetype = mimetype

class TicketProxy(object):
    def __init__(self, extractor, id):
        self._e = extractor
        self.id = id
        self._attachments = {}


    def documents(self):
        return self._attachments


    def _fetch(self, call, name):
        filename = self._e.mkpath(name)
        r = self._e.restcall(call)
        with open(filename, 'w') as f:
            shutil.copyfileobj(r, f)
        self._attachments[name] = Document(filename, name)
        return open(filename, 'r')


    def _get_metadata(self):
        dates = ('created', 'starts', 'started', 'due',
                 'resolved', 'told', 'lastupdated')
        ints = ('priority', 'initialpriority', 'finalpriority',
                'timeestimated', 'timeworked', 'timeleft')
        r = self._fetch("ticket/%d/show" % self.id, 'ticket-%d-details' % self.id)
        status = r.readline()
        blank = r.readline()
        for e in r:
            e = e.strip()
            if '' != e:
                f, v = e.split(':', 1)
                f = f.lower()
                v = v.strip().decode('UTF-8')
                if self._e.args.verbose:
                    print("Received %s='%s'" % (f, v))
                if '' == v:
                    v = None
                if 'id' == f:
                    v = int(v.split('/', 1)[1])
                elif f in ints:
                    v = int(v)
                elif f in dates:
                    if 'Not set' == v:
                        v = None
                    else:
                        v = dateutil.parser.parse(v)
                setattr(self, f, v)
        r.close()
        return self


    def links(self, id):
        r = self._fetch("ticket/%d/links/show" % id, 'ticket-%d-links' % self.id)
        if self._e.args.verbose:
            print(r.read())
        return r


    def attachments(self, id):
        r = self._fetch("ticket/%d/attachments" % id, 'ticket-%d-attachments' % self.id)
        if self._e.args.verbose:
            print(r.read())
        return r


    def history(self, id):
        r = self._fetch("ticket/%d/history" % id, 'ticket-%d-history' % self.id)
        if self._e.args.verbose:
            print(r.read())
        return r


class RTExtract(object):
    def __init__(self):
        self.baseurl = "https://rt.nuug.no/"
        self._tickets = {}

        parser = argparse.ArgumentParser()
        parser.add_argument("--baseurl", help="URL to RT site (default is %s)" % self.baseurl)
        parser.add_argument("--verbose", help="enable debug output",
                            action="store_true")
        parser.add_argument("--username", help="RT user to log in as")
        parser.add_argument("--password", help="RT user password to use for authentication")
        parser.add_argument("--targetpath", help="store extraction in path",
                            default='arkivstruktur')
        self.args = parser.parse_args()

        if self.args.baseurl:
            self.baseurl = args.baseurl

        self.mech = mechanize.Browser()
        self.mech.set_handle_robots(False)
        if self.args.verbose:
            self.mech.set_debug_http(True)


    def mkpath(self, name):
        return "%s/filer/%s" % (self.args.targetpath, name)


    def login(self):
        self.mech.open(self.baseurl)
        self.mech.select_form(nr=0)
        self.mech["user"] = self.args.username
        self.mech["pass"] = self.args.password
        r = self.mech.submit()
        if self.baseurl != r.geturl():
            raise Exception("unable to log in with username %s" % self.args.username)

    def restcall(self, call):
        url = "%sREST/1.0/%s" % (self.baseurl, call)
        if self.args.verbose:
            print(url)
        return self.mech.open(url)


    def ticket(self, id):
        t = TicketProxy(self, id)
        t._get_metadata()
        if t.queue not in self._tickets:
            self._tickets[t.queue] = {}
        self._tickets[t.queue][id] = t
        return t


    def xmlexport(self):
        class XMLNamespace:
            noark = "http://www.arkivverket.no/standarder/noark5/arkivstruktur"
            xsi = "http://www.w3.org/2001/XMLSchema-instance"

        E = lxml.builder.ElementMaker(
            nsmap={
                None: XMLNamespace.noark,
                'xsi': XMLNamespace.xsi
            }
        )

        arkiv = E.arkiv(
            E.systemID(self.baseurl),
        )

        for queue in self._tickets.keys():
            arkivdel = E.arkivdel(E.tittel(queue))
            for id in self._tickets[queue].keys():
                t = self._tickets[queue][id]
                mappe = E.mappe()
                mappeid = '%sTicket/Display.html?id=%d' % (self.baseurl, t.id)
                mappe.append(E.systemID(mappeid))
                mappe.append(E.mappeID(str(t.id)))
                mappe.append(E.tittel(t.subject))
                mappe.append(E.opprettetDato(str(t.created)))
                mappe.append(E.opprettetAv(t.requestors))

                reg = E.registrering(
                    E.systemID('foo'),
                )
                docs = t.documents()
                for f in docs.keys():
                    d = docs[f]
                    db = E.dokumentbeskrivelse(
                        E.tittel(d.name),
                        E.dokumentobjekt(
                            E.format('something'),
                            E.referanseDokumentfil(d.path),
                        ),
                    )
                    reg.append(db)

                reg.attrib['{%s}type' % XMLNamespace.xsi] = 'journalpost'
                mappe.append(reg)
                arkivdel.append(mappe)
            arkiv.append(arkivdel)

        print(lxml.etree.tostring(arkiv,
                                  pretty_print=True,
                                  xml_declaration=True,
                                  encoding='UTF-8'))

def main():
    rt = RTExtract()
    rt.login()

    id = 21407
    t = rt.ticket(id)
    t.links(id)
    t.history(id)
    t.attachments(id)

    rt.xmlexport()

if __name__ == '__main__':
    exit(main())

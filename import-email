#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function

import sys
sys.path.append('lib')

import argparse
import dateutil.parser
import email
from email.utils import parseaddr
import json
import mailbox
import urllib
import urllib2

import n5core.endpoint

relbase = 'http://rel.arkivverket.no/noark5/v4/api'
nikitabase = 'http://nikita.arkivlab.no/noark5/v4'

def decodeheader(s):
    if s is None:
        return s
    retval = None
    for ret, encoding in email.Header.decode_header(s):
        if encoding!=None:
            try:
                ret = ret.decode(encoding)
            except UnicodeDecodeError:
                pass # Ignore bogus headers, store them raw
        if retval is None:
            retval = ret
        else:
            retval += " " + ret
    return retval

def parselinks(links):
    rels = {}
    for l in links:
        if 'href' in l and 'rel' in l:
            rels[l['rel']] = l['href']
    return rels

def mime2format(mimestr):
    # Observed incorrectly spelled MIME types
    mimealias = {
        'image/jpg': 'image/jpeg',
    }
    # IANA register at
    # https://www.iana.org/assignments/media-types/media-types.xhtml
    mimetypemap = {
        'application/pdf':           'RA-PDF',  # Registered MIME type
        'image/jpeg':                'RA-JPEG', # Registered MIME type

        # These should have official codes, but do not
        'application/vnd.oasis.opendocument.presentation' : "ODP",
        'image/png':                 "PNG",     # Registered MIME type
        'message/rfc822':            "RFC822",  # Registered MIME type
        'text/csv':                  'CSV',     # Registered MIME type

        # No use splitting these formats out as separate upload, the
        # original email content is just fine and we are not going to
        # convert them to archive format anyway.
        'application/pgp-signature': None,      # Registered MIME type
        'application/pkcs7-signature': None,    # Registered MIME type
        'application/pgp-keys':      None,      # Registered MIME type
        'text/plain':                None,      # Registered MIME type
        'text/html':                 None,      # Registered MIME type
        'multipart/mixed':           None,      # Registered MIME type
        'multipart/signed':          None,      # Registered MIME type
        'multipart/alternative':     None,      # Registered MIME type

        # Not quite sure what to do with these
        'application/x-xz':          None,      # Not registered MIME type
        'application/octet-stream':  None,      # Registered MIME type
    }
    mimetype = mimestr.split(';')[0]
    if mimetype in mimealias:
        mimetype = mimealias[mimetype]
    return mimetypemap[mimetype]

class MboxImporter(n5core.endpoint.Endpoint):
    def __init__(self):
        self.baseurl = 'http://localhost:8092/noark5v4/'
        self.mbox = 'input.mbox'
        parser = argparse.ArgumentParser()
        parser.add_argument("--baseurl", help="(default is %s)" % self.baseurl)
        parser.add_argument("--mta", help="behave as mta, read single email from stdin",
                            action="store_true")
        parser.add_argument("--mbox", help="(default is %s)" % self.mbox)
        parser.add_argument("--storageurl", help="specify under which URL (arkivdel/mappe) to store email files in")
        parser.add_argument("--saksmappe",
                            help="Store as saksmappe/journalpost instead of basisregistrering/mappe",
                            action="store_true")
        parser.add_argument("--verbose", help="enable debug output",
                            action="store_true")
        args = parser.parse_args()
        self.usesaksmappe = args.saksmappe
        self.storageurl = args.storageurl
        if args.baseurl:
            self.baseurl = args.baseurl
        if args.mta and args.mbox:
            raise Exception("invalid combination of arguments, can not use --mta and --mbox together")
        if args.mbox:
            self.mbox = args.mbox
        self.mta = args.mta
        self.docobjurl = None
        self.parentmap = {}
        n5core.endpoint.Endpoint.__init__(self,self.baseurl)
        self.verbose = args.verbose

    def objectOperation(self, info, relation):
        """
Return the URL/href for a given relation on the object represented by
the json structure.

    """
        if info is None or '_links' not in info:
            return None
        for l in info['_links']:
            if l['rel'] == relation:
                return l['href']
        return None

    def pickUnlessOne(self, info, type):
        """
Check the array in the json structure, if there is only one
elemet, return it.  If there are more than one elemet, ask the
user to pick one.
        """
        #print("Found %d %s entries" % (len(info), type))
        if 'results' in info:
            count = len(info['results'])
        else:
            count = 0
        if 0 == count:
            return None
        if 1 == count:
            if 'tittel' in info['results'][0]:
                print("using %s: %s" % (type, info['results'][0]['tittel']))
            else:
                print("using %s: %s" % (type, info['results'][0]['systemID']))
            return info['results'][0]
        else:
            print("")
            n = -1
            while -1 == n:
                i = 0
                for entry in info['results']:
                    if 'tittel' in entry:
                        print(" %d - %s" % (i, entry['tittel']))
                    else:
                        print(" %d - %s systemID %s" % (i, type, entry['systemID']))
                    i = i + 1
                answer = raw_input("Select which %s you want (or search term): " % type)
                try:
                    n = int(answer)
                    if n < 0 or n >= count:
                        print("error: Invalid selection %d" % n)
                        n = -1
                    else:
                        return info['results'][int(n)]
                except Exception as e:
                    # FIXME search instead
                    pass

    def createEntity(self, name, rel, rels, data):
        if rel not in rels:
            raise Exception("unable to find %s in provided relations" % rel)
        url = rels[rel]
        try:
            if self.verbose:
                print("GET %s" % url)
            (gc, gres) = self.json_get(url)
            default = json.loads(gc)
            for k in default.keys():
                if not k == '_links' and k not in data:
                    data[k] = default[k]
        except urllib2.HTTPError as e:
            pass
        try:
            if self.verbose:
                print("POST: %s" % data)
            (c, res) = self.json_post(url, data)
        except urllib2.HTTPError as e:
            raise
        info = json.loads(c)
        if self.verbose:
            # Validate the stuff we send came back after storing
            for f in data.keys():
                if data[f] is not None:
                    if  f not in info:
                        print("error: field %s=%s disappeared from object" %  (f, data[f]))
                    elif data[f] != info[f]:
                        print("error: field %s=%s do not match object value %s" %  (f, data[f], info[f]))
        return info

    def getDocObjUrl(self):
        """ Cache href to the list of dokumentobject """
        if not self.docobjurl:
            self.docobjurl = self.findRelation(relbase + '/arkivstruktur/dokumentobjekt/')
        return self.docobjurl

    def findSeries(self):
        """
Figure out which URL to use when creating one file per mail thread.

Store the info about the entity in self.seriesinfo
"""
        if self.storageurl:
            (c, res) = self.json_get(self.storageurl)
            self.seriesinfo = json.loads(c)
            return self.seriesinfo
        fondshref = self.findRelation(relbase + '/arkivstruktur/arkiv/')
        (c, res) = self.json_get(fondshref)
        fondsinfo = json.loads(c)
        info = self.pickUnlessOne(fondsinfo, 'arkiv')
        if info is None:
            return None

        serieshref = self.objectOperation(info,
                                          relbase + '/arkivstruktur/arkivdel/')
        (c, res) = self.json_get(serieshref)
        seriesinfo = json.loads(c)
        #print()
        self.seriesinfo = self.pickUnlessOne(seriesinfo, 'arkivdel')
        if self.seriesinfo and self.verbose:
            print("serieurl: %s" % parselinks(self.seriesinfo['_links'])['self'])
        return self.seriesinfo

    def alreadySaved(self, message):
        """
Look up email Message-Id in dokumentobjekt.filename, and return true
if a match is found.
        """
        self.getDocObjUrl()
        messageid = message['message-id']
        print("Looking for msgid: %s" % messageid)

        searchurl = self.docobjurl + '?filter=' +\
            urllib.quote_plus("filnavn eq '%s'" % messageid)
        print(searchurl)
        
        (s, res) = self.json_get(searchurl)
        docobjsinfo = json.loads(s)
        for d in docobjsinfo['results']:
            if 'filnavn' in d:
                print("ID: %s" % d['filnavn'])
                if  d['filnavn'] == messageid:
                      print("found message-id %s" % messageid)
                      return d
        return None

    def findThreadFile(self, message):
        """
Look up if any of the previous messages in a thread (using in-reply-to
and references) are already stored, and if so, return the file they
are in.
"""
        self.getDocObjUrl()
        thread = []
        if 'in-reply-to' in message:
            thread.append(message['in-reply-to'])
        if 'references' in message:
            for msgid in message['references'].replace("\n", " ").split(" "):
                if msgid != "":
                    thread.append(msgid)
        if 0 == len(thread):
            return  None
        #print(thread)
        
        matches = []
        for messageid in thread:
            searchurl = self.docobjurl + '?filter=' +\
                urllib.quote_plus("filnavn eq '%s'" % messageid)
            #print(searchurl)
        
            (s, res) = self.json_get(searchurl)
            docobjsinfo = json.loads(s)
            for d in docobjsinfo['results']:
                if 'filnavn' in d:
                    if  d['filnavn'] == messageid:
                        print("found message-id %s" % messageid)
                        matches.append(d['systemID'])

        # FIXME Look up mappe/saksmappe containing docobj entries
        fileids = {}
        for docobjid in matches:
            if docobjid in self.parentmap:
                (docdescid, childtype, docdeschref) = self.parentmap[docobjid]
                if docdescid in self.parentmap:
                    (recordid, childtype, recordhref) = self.parentmap[docdescid]
                    if recordid in self.parentmap:
                        (fileid, childtype, filehref) = self.parentmap[recordid]
                        fileids[fileid] = filehref
        print("MappeID: ", fileids.keys())
        if 0 < len(fileids.keys()):
            # FIXME what if there are several files?
            filehref = fileids[fileids.keys()[0]]
            (fc, fres) = self.json_get(filehref)
            fileinfo = json.loads(fc)
            #print(fileinfo)
            return fileinfo
        return None

    def createNewFile(self, message):
        filedata = {
            'tittel' : decodeheader(message['subject']),
             # Workaround for bogus ny-* values
            'offentligTittel' : None,
            'beskrivelse' : None,
        }
        if self.usesaksmappe:
            casefilerel = relbase + '/sakarkiv/ny-saksmappe/'
            fileinfo = self.createEntity('saksmappe', casefilerel,
                                         parselinks(self.seriesinfo['_links']),
                                         filedata)
        else:
            filerel = relbase + '/arkivstruktur/ny-mappe/'
            fileinfo = self.createEntity('mappe', filerel,
                                         parselinks(self.seriesinfo['_links']),
                                         filedata)
        return fileinfo
    
    def recordMapping(self, parentinfo, childinfo, type):
        childid = childinfo['systemID']
        parentid = parentinfo['systemID']
        parenthref = parselinks(parentinfo['_links'])['self']
        self.parentmap[childid] = (parentid, type, parenthref)


    def createDocumentObject(self, docdescinfo, docobjdata, content, created):
        docobjrel = relbase + '/arkivstruktur/ny-dokumentobjekt/'
        docobjinfo = self.createEntity('dokumentobjekt', docobjrel,
                                       parselinks(docdescinfo['_links']),
                                       docobjdata)
        created.append(parselinks(docobjinfo['_links'])['self'])
        self.recordMapping(docdescinfo, docobjinfo, 'dokumentobjekt')

        newfilehref = self.objectOperation(docobjinfo,
                                           relbase + '/arkivstruktur/fil/')
        # Make sure all parts going into the POST are type str by
        # converting newfilehref to str.  This avoid a
        # UnicodeDecodeError when the content is not UTF-8.
        try:
            (c, res) = self.post(str(newfilehref), content,
                                 docobjdata['mimeType'],
                                 length=len(content))
        except Exception as e:
            print("error: upload threw exception, removing object: %s %s" % (str(e),
                                                                             e.read()))
            for e in created[::-1]:
                self.delete(e)
            return False
        if 200 != res.code:
            print("error: upload failed (status == %d), removing object"
                  % res.code)
            for e in created[::-1]:
                self.delete(e)
            return False
        return True

    def addMessageToFile(self, fileinfo, message):
        recordrel = relbase + '/arkivstruktur/ny-basisregistrering/'
        recordentryrel = nikitabase + '/ny-journalpost/'
        docdescrel = relbase + '/arkivstruktur/ny-dokumentbeskrivelse/'

        created = []
        content = message.as_string()
        
        messagelen = len(content)
        mimetype = "message/rfc822"
        format = mime2format(mimetype)

        threadstarterid = None
        if 'references' in message:
            threadstarterid = message['references'].strip().split()[0]
        elif 'in-reply-to' in message:
            threadstarterid = message['in-reply-to']
        else:
            threadstarterid = message['message-id']

        fromdate = dateutil.parser.parse(message['date']).isoformat()

        if self.usesaksmappe:
            recorddata = {
                'tittel' : decodeheader(message['subject']),
                "dokumentetsDato"      : fromdate,
                'sendtDato'            : fromdate, # what if date is faked?
                "journalposttype"      : 'I',
                # Workaround for bogus ny-* values
                'beskrivelse' : None,
            }
            recordinfo = self.createEntity('journalpost', recordentryrel,
                                           parselinks(fileinfo['_links']),
                                           recorddata)
            created.append(parselinks(recordinfo['_links'])['self'])
            self.recordMapping(fileinfo, recordinfo, 'journalpost')
            # FIXME consider journalpost and korrespondansepart (from
            # to/from/cc)
            corrpartrel = 'http://rel.arkivverket.no/noark5/v4/api/sakarkiv/ny-korrespondansepartenhet/'
            parts = {
                'from' : 'EA',
                'to'   : 'EM',
                'cc'   : 'EK',
            }
            # FIXME should sort into KorrespondansepartEnhet,
            # KorrespondansepartPerson and KorrespondansepartIntern.
            # How can we do this?
            for part in parts:
                if part in message:
                    partstr = decodeheader(message[part])
                    for p in partstr.split(","):
                        navn, epost = parseaddr("From: %s" % p)
                        corrdata = {
                            'korrespondanseparttype' : {
                                'kode' : parts[part],
                            },
                            'navn' : navn,
                            'kontaktinformasjon' : { 'epostadresse' : epost},
                            'kontaktperson' : None,
                            'forretningsadresse' : {},
                            'postadresse' : {},
                        }
                        corrinfo = \
                            self.createEntity('correspondance part',
                                              corrpartrel,
                                              parselinks(recordinfo['_links']),
                                              corrdata)

        else:
            recorddata = {
                'tittel' : decodeheader(message['subject']),
                'beskrivelse' : None,
            }
            recordinfo = self.createEntity('basisregistrering', recordrel,
                                           parselinks(fileinfo['_links']),
                                           recorddata)
            created.append(parselinks(recordinfo['_links'])['self'])
            self.recordMapping(fileinfo, recordinfo, 'basisregistrering')
        
        docdescdata = {
            'tittel' : decodeheader(message['subject']),
            'oppbevaringssted' : threadstarterid ,
        }
        docdescinfo = self.createEntity('dokumentbeskrivelse', docdescrel,
                                       parselinks(recordinfo['_links']),
                                        docdescdata)
        created.append(parselinks(docdescinfo['_links'])['self'])
        self.recordMapping(recordinfo, docdescinfo, 'dokumentbeskrivelse')
        
        docobjdata = {
            "versjonsnummer"  : str(0),
            "variantformat"   : "Produksjonsformat",
            "format"          : format,
            "filstoerrelse"   : str(messagelen),
            "filnavn"         : message['message-id'],       
            "mimeType"        : mimetype,
        }
        if not self.createDocumentObject(docdescinfo, docobjdata,
                                         content, created):
            print("error: failed to create document object")
            return False
        if message.is_multipart():
            for part in message.walk():
                mimetype = part.get_content_type()
                format = mime2format(mimetype)
                if self.verbose:
                    print("info: mapping %s to %s" % (mimetype, format))
                if format is None:
                    continue
                content = part.get_payload(decode=True)
                if content is None:
                    continue
                contentlen = len(content)
                docobjdata = {
                    "versjonsnummer"  : str(0),
                    "variantformat"   : "Produksjonsformat",
                    "format"          : format,
                    "filstoerrelse"   : contentlen,
                    "filnavn"         : part.get_filename(),
                    "mimeType"        : mimetype,
                }

                if not self.createDocumentObject(docdescinfo, docobjdata,
                                                 content, created):
                    print("error: failed to create document object for attachment %s"
                          % part.get_filename())

        return True

    def uploadEmail(self, message):
        docobjinfo = self.alreadySaved(message)
        if docobjinfo:
            print("email already part of archive")
            return False
        threadfile = self.findThreadFile(message)
        if not threadfile:
            # create new file
            threadfile = self.createNewFile(message)

        # Add to existing file
        return self.addMessageToFile(threadfile, message)

    def loadMbox(self):
        retval = True
        mbox = mailbox.mbox(self.mbox)
        for message in mbox:
            if not self.uploadEmail(message):
                print("error: failed to load email")
                retval = False
        return retval

    def loadEmail(self):
        """ Load a single email from stdin like /usr/sbin/sendmail does. """
        message = email.message_from_file(sys.stdin)
        if not self.uploadEmail(message):
            print("error: failed to load email")
            return False
        return True

    def load(self):
        if self.mta:
            return self.loadEmail()
        else:
            return self.loadMbox()

def main():
    t = MboxImporter()
    t.login()
    if t.findSeries() is None:
        print("error: unable to find arkivdel to use")
        return 1
    return t.load() != True

if __name__ == '__main__':
    exit(main())

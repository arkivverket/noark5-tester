#!/usr/bin/python

import sys
sys.path.append('lib')

import argparse
import json
import n5core.endpoint
import sqlite3

#class Nokark5Client(n5core.endpoint.Endpoint):

def parselinks(links):
        rels = {}
        for l in links:
                if 'href' in l and 'rel' in l:
                        rels[l['rel']] = l['href']
        return rels


def createFond(ep, fondsdata):
        """

Example fondsdata:

        fondsdata = {
            "tittel"          : "Title of the test fonds",
            "beskrivelse"     : "Description of the test fonds",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "dokumentmedium"  : "Elektronisk arkiv",
        }

"""
        fondsrel = 'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkiv/'
        createfondsurl = ep.findRelation(fondsrel)
        (c, res) = ep.json_post(createfondsurl, fondsdata)
        fondinfo = json.loads(c)
        return fondinfo

def createSeries(ep, fondinfo, seriesdata):
        """

Example seriesdata:

        seriesdata = {
            "tittel"          : "Title of the test series",
            "beskrivelse"     : "Description of the test series",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "dokumentmedium"  : "Elektronisk arkiv",
        }
"""
        createseriesrel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkivdel/'
        createseriesurl = parselinks(fondinfo['_links'])[createseriesrel]
        (c, res) = ep.json_post(createseriesurl, seriesdata)
        seriesinfo = json.loads(c)
        return seriesinfo

def createFile(ep, seriesinfo, filedata):
        """
Example filedata:

        filedata = {
            "mappeID"         : "2006/01",
            "offentligTittel" : "Public title of the test file",
            "tittel"          : "Title of the test file",
            "beskrivelse"     : "Description of the test file",
            "noekkelord"      : ["keyword 1", "keyword 2", "keyword 3"],
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "dokumentmedium"  : "Elektronisk arkiv",
        }
"""
        filerel = \
                'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-mappe/'
        createfileurl = parselinks(seriesinfo['_links'])[filerel]
        (c, res) = ep.json_post(createfileurl, filedata)
        fileinfo = json.loads(c)
        return fileinfo

def createRecord(ep, fileinfo, recorddata):
        """
Example recorddata:

        recorddata = {
        }
"""
        createrecordrel = \
           'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-registrering/'
        createrecordurl = parselinks(fileinfo['_links'])[createrecordrel]
        (c, res) = ep.json_post(createrecordurl, recorddata)
        recordinfo = json.loads(c)
        return recordinfo

def createDocDesc(ep, recordinfo, docdescdata):
        """

Example docdescdata:

        docdescdata = {
            "dokumenttype"    : "type dokument",
            "dokumentstatus"  : "status of document",
            "tittel"          : "Title of the test document description",
            "tilknyttetRegistreringSom" : "Associated with record as"
        }
"""
        createdocdescrel = \
           'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentbeskrivelse/'
        createdocdescurl = parselinks(recordinfo['_links'])[createdocdescrel]
        (c, res) = ep.json_post(createdocdescurl, docdescdata)
        docdescinfo = json.loads(c)
        return docdescinfo

def createDocObject(ep, docdescinfo, docobjdata):
        """
Example docobjdata:
        docobjdata = {
            "versjonsnummer"  : 1,
            "variantformat"   : "Arkivformat",
            "format"          : "PDF",
            "formatDetaljer"  : "PDF/A PDFv1.4",
        }
"""
        createdocobjrel = \
           'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentobjekt/'
        createdocobjurl = parselinks(docdescinfo['_links'])[createdocobjrel]
        (c, res) = ep.json_post(createdocobjurl, docobjdata)
        docobjinfo = json.loads(c)
        return docobjinfo

def main():
        parser = argparse.ArgumentParser()
        parser.add_argument("--verbose", help="print more debug information",
                            action="store_true")
        args = parser.parse_args()
        baseurl = "http://localhost:8092/noark5v4/"
        e = n5core.endpoint.Endpoint(baseurl)
        e.verbose = args.verbose
        e.login()

        # Mapping from agency to fond and serie
        fonds = {}
        series = {}

        conn = sqlite3.connect('postliste-oslo-havn.sqlite')
        c = conn.cursor()
        c.execute('select * from swdata order by docdate')
#        print c.description
#        print c.rowcount
        i = 0
        n = {}
        for f in c.description:
                n[f[0]] = i
                i += 1
        i = 0
        for row in c:
                i += 1
                # accesscode, agency, casedesc, casedocseq, caseid,
                # caseseqnr, caseyear, docdate, docdesc, doctype,
                # exemption, journalid, journalseqnr, journalyear,
                # recipient, recorddate, scrapedurl, scrapestamputc,
                # sender

                # FIXME should search for agency to avoid duplicates

                agency = row[n['agency']]
                if agency not in fonds:
                        print("info: First time agency %s" % agency)
                        fondsdata = {
                                "tittel"          : agency,
                                "dokumentmedium"  : "Elektronisk arkiv",
                        }
                        fondinfo = createFond(e, fondsdata)

                        seriesdata = {
                                "tittel"          : agency,
                                "dokumentmedium"  : "Elektronisk arkiv",
                        }
                        seriesinfo = createSeries(e, fondinfo, seriesdata)
                        fonds[agency] = fondinfo
                        series[agency] = seriesinfo
                else:
                        fondinfo = fonds[agency]
                        seriesinfo = series[agency]
                print("info: Creating using fonds:%s and series:%s" % (fondinfo['tittel'], seriesinfo['tittel']))
                filedata = {
                        "mappeID"         : row[n['caseid']],
                        "offentligTittel" : row[n['casedesc']],
                        "tittel"          : "",
                        "beskrivelse"     : "",
                        "noekkelord"      : ["keyword 1"],
                        "oppbevaringsted" : [ "location 1" ],
                        "dokumentmedium"  : "Elektronisk arkiv",
                }
                fileinfo = createFile(e, seriesinfo, filedata)

                recorddata = {
                }
                recordinfo = createRecord(e, fileinfo, recorddata)

                docdescdata = {
                        "dokumenttype"    : row[n['doctype']],
                        "tittel"          : row[n['docdesc']],
                        "tilknyttetRegistreringSom" : "Associated with record as"
                }
                docdescinfo = createDocDesc(e, recordinfo, docdescdata)
        print "Added %d entries" % i
if __name__ == '__main__':
    main()

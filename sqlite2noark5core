#!/usr/bin/python

import sys
sys.path.append('lib')

import argparse
import json
import n5core.endpoint
import sqlite3
import urllib2

createfondsrel = 'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkiv/'
createseriesrel = 'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkivdel/'
createcasefilerel = 'http://rel.kxml.no/noark5/v4/api/sakarkiv/ny-saksmappe/'
createrecordrel = 'http://nikita.arkivlab.no/noark5/v4/ny-journalpost/'
createdocdescrel = 'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentbeskrivelse/'

def parselinks(links):
        rels = {}
        for l in links:
                if 'href' in l and 'rel' in l:
                        rels[l['rel']] = l['href']
        return rels

def createEntity(ep, name, rel, rels, data):
        if rel not in rels:
                raise Exception("unable to find %s in provided relations" % rel)
        url = rels[rel]
        try:
            (gc, gres) = ep.json_get(url)
            default = json.loads(gc)
            for k in default.keys():
                if not k == '_links' and k not in data:
                    data[k] = default[k]
        except urllib2.HTTPError, e:
                pass
        try:
            (c, res) = ep.json_post(url, data)
        except urllib2.HTTPError, e:
            raise
        info = json.loads(c)
        linkrefs = parselinks(info['_links'])
        return info

def main():
        baseurl = "http://localhost:8092/noark5v4/"
        parser = argparse.ArgumentParser()
        parser.add_argument("--baseurl", help="(default is %s)" % baseurl)
        parser.add_argument("--verbose", help="print more debug information",
                            action="store_true")
        args = parser.parse_args()
        if args.baseurl:
                baseurl = args.baseurl
                
        e = n5core.endpoint.Endpoint(baseurl)
        e.verbose = args.verbose
        e.login()

        # Mapping from agency to fond and serie
        fonds = {}
        series = {}

        conn = sqlite3.connect('postliste-oslo-havn.sqlite')
        c = conn.cursor()
        c.execute('select * from swdata order by docdate')
#        print c.description
#        print c.rowcount
        i = 0
        n = {}
        for f in c.description:
                n[f[0]] = i
                i += 1
        i = 0
        for row in c:
                #print row
                i += 1
                # accesscode, *agency, *casedesc, *casedocseq, *caseid,
                # *caseseqnr, *caseyear, *docdate, *docdesc, *doctype,
                # exemption, journalid, *journalseqnr, *journalyear,
                # recipient, *recorddate, scrapedurl, scrapestamputc,
                # sender

                # FIXME should search for agency to avoid duplicates

                agency = row[n['agency']]
                if agency not in fonds:
                        print("info: First time agency %s" % agency)
                        fondsdata = {
                                "tittel"       : agency,
                        }
                        createfondsurl = e.findRelation(createfondsrel)
                        (c, res) = e.json_post(createfondsurl, fondsdata)
                        fondsinfo = json.loads(c)

                        # FIXME figure out better series?
                        seriesdata =  {
                                "tittel"          : agency,
                                "dokumentmedium"  : "Elektronisk arkiv",
                        }
                        seriesinfo = createEntity(e, 'series', createseriesrel,
                                                  parselinks(fondsinfo['_links']),
                                                  seriesdata)
                        fonds[agency] = fondsinfo
                        series[agency] = seriesinfo
                else:
                        fondsinfo = fonds[agency]
                        seriesinfo = series[agency]
                print("info: Creating using fonds:%s and series:%s" % (fondsinfo['tittel'], seriesinfo['tittel']))
                casefiledata = {
                        "mappeID"              : row[n['caseid']],
                        "saksaar"              : row[n['caseyear']],
                        "sakssekvensnummer"    : row[n['caseseqnr']],
                        "offentligTittel"      : row[n['casedesc']],
                        "tittel"               : row[n['casedesc']],
                        "beskrivelse"          : None,
                        "administrativEnhet"   : None,
                        "saksansvarlig"        : None,
                }
                casefileinfo = createEntity(e, 'file', createcasefilerel,
                                            parselinks(seriesinfo['_links']),
                                            casefiledata)

                registryentrydata = {
                        "tittel"               : row[n['docdesc']],
                        "beskrivelse"          : None,
                        "dokumentetsDato"      : row[n['docdate']],
                        "journaldato"          : row[n['recorddate']],
                        "journalaar"           : row[n['journalyear']],
                        "journalsekvensnummer" : row[n['journalseqnr']],
                        "journalpostnummer"    : row[n['casedocseq']],

                }
                registryentryinfo = createEntity(e, 'journalpost',
                                                 createrecordrel,
                                                 parselinks(casefileinfo['_links']),
                                                 registryentrydata)

                docdescdata = {
                        "dokumenttype"    : row[n['doctype']],
                        "tittel"          : row[n['docdesc']],
                        "tilknyttetRegistreringSom" : "Associated with record as"
                }

                docdescinfo = createEntity(e, 'docdesc', createdocdescrel,
                                           parselinks(registryentryinfo['_links']),
                                           docdescdata)
        print "Added %d entries" % i
if __name__ == '__main__':
    main()

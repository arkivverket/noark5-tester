#!/usr/bin/python

import sys
sys.path.append('lib')

import json
import n5core.endpoint
import sqlite3

#class Nokark5Client(n5core.endpoint.Endpoint):

def createFond(ep, fondsdata):
        """

Example fondsdata:

        fondsdata = {
            "tittel"          : "Title of the test fonds",
            "beskrivelse"     : "Description of the test fonds",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "dokumentmedium"  : "Elektronisk arkiv",
        }

"""
        createfondsurl = 'hateoas-api/arkivstruktur/ny-arkiv'
        (c, res) = ep.json_post(createfondsurl, fondsdata)
        fondinfo = json.loads(c)
        return fondinfo

def createSeries(ep, fondid, seriesdata):
        """

Example seriesdata:

        seriesdata = {
            "tittel"          : "Title of the test series",
            "beskrivelse"     : "Description of the test series",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "dokumentmedium"  : "Elektronisk arkiv",
        }
"""
        createseriesurl = 'hateoas-api/arkivstruktur/arkiv/%s/ny-arkivdel' % fondid
        (c, res) = ep.json_post(createseriesurl, seriesdata)
        serieinfo = json.loads(c)
        return serieinfo

def createFile(ep, serieid, filedata):
        """
Example filedata:

        filedata = {
            "mappeID"         : "2006/01",
            "offentligTittel" : "Public title of the test file",
            "tittel"          : "Title of the test file",
            "beskrivelse"     : "Description of the test file",
            "noekkelord"      : ["keyword 1", "keyword 2", "keyword 3"],
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "dokumentmedium"  : "Elektronisk arkiv",
        }
"""
        createfileurl = 'hateoas-api/arkivstruktur/arkivdel/%s/ny-mappe' % serieid
        (c, res) = ep.json_post(createfileurl, filedata)
        fileinfo = json.loads(c)
        return fileinfo

def createRecord(ep, fileid, recorddata):
        """
Example recorddata:

        recorddata = {
        }
"""
        createrecordurl = 'hateoas-api/arkivstruktur/mappe/%s/ny-registrering' % fileid
        (c, res) = ep.json_post(createrecordurl, recorddata)
        recordinfo = json.loads(c)
        return recordinfo

def createDocDesc(ep, recordid, docdescdata):
        """

Example docdescdata:

        docdescdata = {
            "dokumenttype"    : "type dokument",
            "dokumentstatus"  : "status of document",
            "tittel"          : "Title of the test document description",
            "tilknyttetRegistreringSom" : "Associated with record as"
        }
"""
        createdocdescurl = 'hateoas-api/arkivstruktur/registrering/%s/ny-dokumentbeskrivelse' % recordid
        (c, res) = ep.json_post(createdocdescurl, docdescdata)
        docdescinfo = json.loads(c)
        return docdescinfo

def createDocObject(ep, docdescid, docobjdata):
        """
Example docobjdata:
        docobjdata = {
            "versjonsnummer"  : 1,
            "variantformat"   : "Arkivformat",
            "format"          : "PDF",
            "formatDetaljer"  : "PDF/A PDFv1.4",
        }
"""
        createdocobjurl = 'hateoas-api/arkivstruktur/dokumentbeskrivelse/%s/ny-dokumentobjekt' % docdescid
        (c, res) = ep.json_post(createdocobjurl, docobjdata)
        docobjinfo = json.loads(c)
        return docobjinfo

def main():
        baseurl = "http://localhost:8092/noark5v4/"
        e = n5core.endpoint.Endpoint(baseurl)
        e.login()

        # Mapping from agency to fond and serie
        fonds = {}
        series = {}

        conn = sqlite3.connect('postliste-oslo-havn.sqlite')
        c = conn.cursor()
        c.execute('select * from swdata order by docdate')
        print c.description
        print c.rowcount
        i = 0
        n = {}
        for f in c.description:
                n[f[0]] = i
                i += 1
        i = 0
        for row in c:
                i += 1
                # accesscode, agency, casedesc, casedocseq, caseid,
                # caseseqnr, caseyear, docdate, docdesc, doctype,
                # exemption, journalid, journalseqnr, journalyear,
                # recipient, recorddate, scrapedurl, scrapestamputc,
                # sender

                agency = row[n['agency']]
                if agency not in fonds:
                        print "First time agency %s" % agency
                        fondsdata = {
                                "tittel"          : agency,
                                "dokumentmedium"  : "Elektronisk arkiv",
                        }
                        fondinfo = createFond(e, fondsdata)
                        fondid = fondinfo['systemID']

                        seriesdata = {
                                "tittel"          : agency,
                                "dokumentmedium"  : "Elektronisk arkiv",
                        }
                        serieinfo = createSeries(e, fondid, seriesdata)
                        serieid = serieinfo['systemID']
                        fonds[agency] = fondid
                        series[agency] = serieid
                else:
                        fondid = fonds[agency]
                        serieid = series[agency]
                print "creating using %s and %s" % (fondid, serieid)
                filedata = {
                        "mappeID"         : row[n['caseid']],
                        "offentligTittel" : row[n['casedesc']],
                        "tittel"          : "",
                        "beskrivelse"     : "",
                        "noekkelord"      : ["keyword 1"],
                        "oppbevaringsted" : [ "location 1" ],
                        "dokumentmedium"  : "Elektronisk arkiv",
                }
                fileinfo = createFile(e, serieid, filedata)
                fileid = fileinfo['systemID']

                recorddata = {
                }
                recordinfo = createRecord(e, fileid, recorddata)
                recordid = recordinfo['systemID']

                docdescdata = {
                        "dokumenttype"    : row[n['doctype']],
                        "tittel"          : row[n['docdesc']],
                        "tilknyttetRegistreringSom" : "Associated with record as"
                }
                docdescinfo = createDocDesc(e, recordid, docdescdata)
                docdescid = docdescinfo['systemID']
        print "Added %d entries" % i
if __name__ == '__main__':
    main()

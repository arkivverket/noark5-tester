#!/usr/bin/python
"""

Connect to the REST API of a Noark 5 service and check that it behaves
as it should.

"""

import json
import mechanize
import urlparse
import urllib2

class Endpoint:
    def __init__(self, baseurl):
        self.baseurl = baseurl
        self._browser = mechanize.Browser()

    def expandurl(self, path):
        return urlparse.urljoin(self.baseurl, path);

    def login(self, username = 'admin', password = 'password'):
        url = self.expandurl('login')
        print url
        self._browser.open(url)
        self._browser.select_form(nr=0)
#        self._browser.form.set_all_readonly(False)
        self._browser['username'] = username
        self._browser['password'] = password
        self._browser.submit()
        html = self._browser.response().read()

    def json_post(self, path, data):
        url = self.expandurl(path)
        print url
        headers = {
            'Accept' : 'application/vnd.noark5-v4+json',
            'Content-Type': 'application/vnd.noark5-v4+json',
        }
        jsondata = json.dumps(data)
        request = urllib2.Request(url, jsondata, headers)
        response = self._browser.open(request)
        content = response.read()
        return (content, response)

    def json_get(self, path):
        url = self.expandurl(path)
        print url
        headers = {
            'X_REQUESTED_WITH' :'XMLHttpRequest',
            'Accept' : 'application/json, application/vnd.noark5-v4+json, text/javascript, */*; q=0.01',
            }
        request = urllib2.Request(url, None, headers)
        response = self._browser.open(request)
        content = response.read()
        return (content, response)

class Noark5Tester (Endpoint):
    baseurl = "http://127.0.0.1:8092/noark5v4/"

    def __init__(self):
        Endpoint.__init__(self,self.baseurl)
        self.success_count = 0
        self.failure_count = 0
    def success(self, msg):
        print "success: " + msg
        self.success_count += 1
    def failure(self, msg):
        print "failure: " + msg
        self.failure_count += 1
    def verify(self, check, msg):
        if (check):
            self.success(msg)
        else:
            self.failure(msg)

    def discover(self):
        print "recorsively discovering URLs from the root"
        self.urls = []
        urlsleft = ['.']
        urlseen = {}
        while 0 < len(urlsleft):
            url = urlsleft.pop(0)
            if url in urlseen:
                continue
            urlseen[url] = 1
            try:
                (content, res) = self.json_get(url)
                ctype = res.info().getheader('Content-Type')
                self.verify(0 == ctype.find('application/vnd.noark5-v4+json'),
                            "returned MIME type is application/vnd.noark5-v4+json")
                if 0 == ctype.find('application/vnd.noark5-v4+json'):
#                    print content
                    baseref = json.loads(content)
                    for l in baseref['_links']:
                        if 'href' in l:
                            if l['href'] not in urlseen:
                                urlsleft.append(l['href'])
                self.urls.append(url)
            except urllib2.HTTPError, e:
                self.failure("unable to fetch %s" % url)
        for url in sorted(self.urls):
            self.success("found %s" % url)
        
    def testBase(self):
        (content, res) = self.json_get(".")
        self.success("found base")
        contenttype = res.info().getheader('Content-Type')
        if 0 != contenttype.find('application/vnd.noark5-v4+json'):
            self.failure('incorrect content-type for base: %s' % contenttype)
        else:
            self.success('correct content-type for base')
            baseref = json.loads(content)
#            print d
            if '_links' in baseref:
                self.success('found _links in json response')
                return baseref
            else:
                self.failure('did not find _links in json response')
        
        return None
    def testArkiv(self):
        (a, res) = self.json_get("hateoas-api/arkiv")
        print a
        self.success("found arkiv")
    def testArkivDel(self):
        (ad, res) = self.json_get("hateoas-api/arkivdel")
        print ad
        self.success("found arkivdel")
    def testNewDocument(self):
        fondsdata = {
            "title"           : "Title of the test fonds",
            "description"     : "Description of the test fonds",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "documentMedium"  : "Elektronisk arkiv",
        }
        createfondsurl = 'hateoas-api/arkivstruktur/ny-arkiv'
        (c, res) = self.json_post(createfondsurl, fondsdata)
        fondinfo = json.loads(c)
        fondid = fondinfo['systemID']
        self.verify(fondid is not None, "created fond")

        seriesdata = {
            "title"           : "Title of the test series",
            "description"     : "Description of the test series",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "documentMedium"  : "Elektronisk arkiv",
        }
        createseriesurl = 'hateoas-api/arkivstruktur/arkiv/%s/ny-arkivdel' % fondid
        (c, res) = self.json_post(createseriesurl, seriesdata)
        serieinfo = json.loads(c)
        serieid = serieinfo['systemID']
        self.verify(serieid is not None, "created serie")

        filedata = {
            "fileId"          : "2006/01",
            "officialTitle"   : "Public title of the test file",
            "title"           : "Title of the test file",
            "description"     : "Description of the test file",
            "keyword"         : ["keyword 1", "keyword 2", "keyword 3"],
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "documentMedium"  : "Elektronisk arkiv",
        }
        createfileurl = 'hateoas-api/arkivstruktur/arkivdel/%s/ny-mappe' % serieid
        (c, res) = self.json_post(createfileurl, filedata)
        fileinfo = json.loads(c)
        fileid = fileinfo['systemID']
        self.verify(fileid is not None, "created file")

        recorddata = {
        }
        createrecordurl = 'hateoas-api/arkivstruktur/mappe/%s/ny-registrering' % fileid
        (c, res) = self.json_post(createrecordurl, recorddata)
        recordinfo = json.loads(c)
        recordid = recordinfo['systemID']
        self.verify(recordid is not None, "created record")

        docdescdata = {
            "dokumenttype"    : "type dokument",
            "dokumentstatus"  : "status of document",
            "title"           : "Title of the test document desciprion",
            "tilknyttetRegistreringSom" : "Associated with record as"
        }

        createdocdescurl = 'hateoas-api/arkivstruktur/registrering/%s/ny-dokumentbeskrivelse' % recordid
        (c, res) = self.json_post(createdocdescurl, docdescdata)
        docdescinfo = json.loads(c)
        docdescid = docdescinfo['systemID']
        self.verify(docdescid is not None, "created document description")

        docobjdata = {
            "versjonsnummer"  : 1,
            "variantformat"   : "Arkivformat",
            "format"          : "PDF",
            "formatDetaljer"  : "PDF/A PDFv1.4",
        }
        createdocobjurl = 'hateoas-api/arkivstruktur/dokumentbeskrivelse/%s/ny-dokumentobjekt' % docdescid
        (c, res) = self.json_post(createdocobjurl, docobjdata)
        docobjinfo = json.loads(c)
        docobjid = docobjinfo['systemID']
        self.verify(docobjid is not None, "created document object")
    def runtests(self):
        try:
            baseref = self.testBase()
            try:
                self.login()
                self.gotlogin = True
                self.success("able to log in")
            except urllib2.HTTPError, e:
                self.gotlogin = False
                self.failure("unable to log in, trying other things")
            self.discover()
            self.testNewDocument()
            self.testArkiv()
            self.testArkivDel()
        finally:
            print "%d successes, %d failures" % (self.success_count,
                                                 self.failure_count)
def main():
    t = Noark5Tester()
    t.runtests()

if __name__ == '__main__':
    main()

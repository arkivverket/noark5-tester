#!/usr/bin/python
"""

Connect to the REST API of a Noark 5 service and check that it behaves
as it should.

"""

import json
import mechanize
import urlparse
import urllib2

class Endpoint:
    def __init__(self, baseurl):
        self.baseurl = baseurl
        self._browser = mechanize.Browser()

    def expandurl(self, path):
        return urlparse.urljoin(self.baseurl, path);

    def login(self, username = 'admin', password = 'password'):
        url = self.expandurl('login')
        print url
        self._browser.open(url)
        self._browser.select_form(nr=0)
#        self._browser.form.set_all_readonly(False)
        self._browser['username'] = username
        self._browser['password'] = password
        self._browser.submit()
        html = self._browser.response().read()

    def json_post(self, path, data):
        url = self.expandurl(path)
        print url
        headers = {
            'Content-Type': 'application/vnd.noark5-v4+json',
        }
        jsondata = json.dumps(data)
        request = urllib2.Request(url, jsondata, headers)
        response = self._browser.open(request)
        content = response.read()
        return (content, response)

    def json_get(self, path):
        url = self.expandurl(path)
        print url
        headers = {
            'X_REQUESTED_WITH' :'XMLHttpRequest',
            'Accept' : 'application/json, application/vnd.noark5-v4+json, text/javascript, */*; q=0.01',
            }
        request = urllib2.Request(url, None, headers)
        response = self._browser.open(request)
        content = response.read()
        return (content, response)

class Noark5Tester (Endpoint):
    baseurl = "http://127.0.0.1:8092/noark5v4/"

    def __init__(self):
        Endpoint.__init__(self,self.baseurl)
        self.success_count = 0
        self.failure_count = 0
    def success(self, msg):
        print "success: " + msg
        self.success_count += 1
    def failure(self, msg):
        print "failure: " + msg
        self.failure_count += 1

    def testBase(self):
        (content, res) = self.json_get(".")
        self.success("found base")
        contenttype = res.info().getheader('Content-Type')
        if 0 != contenttype.find('application/vnd.noark5-v4+json'):
            self.failure('incorrect content-type for base: %s' % contenttype)
        else:
            self.success('correct content-type for base')
            baseref = json.loads(content)
#            print d
            if '_links' in baseref:
                self.success('found _links in json response')
                return baseref
            else:
                self.failure('did not find _links in json response')
        
        return None
    def testArkiv(self):
        (a, res) = self.json_get("hateoas-api/arkiv")
        print a
        self.success("found arkiv")
    def testArkivDel(self):
        (ad, res) = self.json_get("hateoas-api/arkivdel")
        print ad
        self.success("found arkivdel")
    def runtests(self):
        try:
            baseref = self.testBase()
            try:
                self.login()
                self.gotlogin = True
                self.success("able to log in")
            except urllib2.HTTPError, e:
                self.gotlogin = False
                self.failure("unable to log in, trying other things")
#            self.discover()
            self.testArkiv()
            self.testArkivDel()
            self.testNewDocument()
        finally:
            print "%d successes, %d failures" % (self.success_count,
                                                 self.failure_count)
def main():
    t = Noark5Tester()
    t.runtests()

if __name__ == '__main__':
    main()

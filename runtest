#!/usr/bin/python
# Copyright (C) 2017 Petter Reinholdtsen <pere@hungry.com>
#
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

"""

Connect to the REST API of a Noark 5 service and check that it behaves
as it should.  See also http://rel.kxml.no/noark5/konformitetsniva/

"""

import sys
sys.path.append('lib')

import json
import mechanize
import urlparse
import urllib2
import n5core.endpoint

class Noark5Tester (n5core.endpoint.Endpoint):
    knownrels = [
        'http://rel.kxml.no/noark5/v4/api/administrasjon/ny-arkivskaper/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/arkiv/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/arkivdel/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/arkivskaper/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/basisregistrering/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/dokumentbeskrivelse/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/dokumentobjekt/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/klasse/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/klassifikasjonssystem/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/mappe/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkiv/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkivdel/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentbeskrivelse/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentobjekt/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-klassifikasjonssystem/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-mappe/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-merknad/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-registrering/',
        'http://rel.kxml.no/noark5/v4/api/arkivstruktur/registrering/',
        'http://rel.kxml.no/noark5/v4/api/metadata/arkivdelstatus/',
        'http://rel.kxml.no/noark5/v4/api/metadata/dokumentmedium/',
        'http://rel.kxml.no/noark5/v4/api/metadata/dokumentstatus/',
        'http://rel.kxml.no/noark5/v4/api/metadata/dokumenttype/',
        'http://rel.kxml.no/noark5/v4/api/metadata/tilknyttetregistreringsom/',
        'http://rel.kxml.no/noark5/v4/api/sakarkiv/',
        'self',
    ]
    def __init__(self):
        if 1 < len(sys.argv) and '--reference' == sys.argv[1]:
            self.baseurl = "http://n5test.kxml.no/api/"
        else:
            self.baseurl = "http://localhost:8092/noark5v4/"
        n5core.endpoint.Endpoint.__init__(self,self.baseurl)
        self.success_count = 0
        self.failure_count = 0
    def success(self, msg):
        print "success: " + msg
        self.success_count += 1
        return True
    def failure(self, msg):
        print "failure: " + msg
        self.failure_count += 1
        return False
    def verify(self, check, msg):
        if (check):
            return self.success(msg)
        else:
            return self.failure(msg)

    def discover(self):
        print "recursively discovering standard URLs from the top"
        relok = {}
        for r in self.knownrels:
            relok[r] = True
        self.urls = []
        self.rels = {}
        urlsleft = ['.']
        urlseen = {}
        while 0 < len(urlsleft):
            url = urlsleft.pop(0)
            if url in urlseen:
                continue
            urlseen[url] = 1
            try:
                (content, res) = self.json_get(url)
                ctype = res.info().getheader('Content-Type')
                if self.verify(0 == ctype.find('application/vnd.noark5-v4+json'),
                               "MIME type %s should be application/vnd.noark5-v4+json for url %s" % (ctype, url)):
#                    print content
                    baseref = json.loads(content)
                    if not '_links' in baseref:
                        self.failure("%s missing _links: %s" % (url, baseref))
                    for l in baseref['_links']:
                        # Ignore non-standard relations
                        if 'href' in l and \
                           -1 != l['rel'].find("//rel.kxml.no/noark5/"):
                            href = l['href']
                            if href not in urlseen:
                                urlsleft.append(href)
                            if 'rel' in l and l['rel'] != 'self':
                                self.verify(l['rel'] in relok,
                                            'rel %s should be well known' % l['rel'])
                                rel = l['rel']
                                if rel in self.rels and href != self.rels[rel]:
                                    self.failure("unique duplicate rel %s in _links for %s" % (rel, url))
                                else:
                                    self.rels[rel] = href
                self.urls.append(url)
            except urllib2.HTTPError, e:
                self.failure("unable to GET %s" % url)
        for url in sorted(self.urls):
            self.success("found %s" % url)
        for rel in sorted(self.rels.keys()):
            print("mapping %s to %s" % (rel, self.rels[rel]))
        
    def testBasis(self):
        """
Test basis requirements for NOARK 5 Core.

"""
        # Verify CORS support,
        # https://en.wikipedia.org/wiki/Cross-origin_resource_sharing
        try:
            (ocontent, ores) = self.options('.')
            self.success("level 0 CORS - HTTP OPTTIONS request worked")
        except urllib2.HTTPError, e:
            self.failure("level 0 CORS - HTTP OPTTIONS request not working")
        
        # Verify ability to produce XML output
        try:
            (content, res) = self.xml_get(".")
            contenttype = res.info().getheader('Content-Type')
            if 0 != contenttype.find('application/vnd.noark5-v4+xml'):
                self.failure('level 0 XML - incorrect Content-Type for base: %s' % contenttype)
            else:
                self.success('level 0 XML - correct Content-Type for base')
            # FIXME should verify XML content too
        except urllib2.HTTPError, e:
            self.failure("level 0 XML - unable to GET content for base.")

        # Verify ability to produce JSON output
        try:
            (content, res) = self.json_get(".")
            self.success("level 0 JSON - found base")
            contenttype = res.info().getheader('Content-Type')
            if 0 != contenttype.find('application/vnd.noark5-v4+json'):
                self.failure('level 0 JSON - incorrect content-type for base: %s' % contenttype)
            else:
                self.success('level 0 JSON - correct content-type for base')
                baseref = json.loads(content)
#                print d
                if '_links' in baseref:
                    self.success('level 0 JSON - found _links in json response')
                    return baseref
                else:
                    self.failure('level 0 JSON - did not find _links in json response')
        except urllib2.HTTPError, e:
            self.failure('level 0 JSON - unable to GET JSON content for base.')

        # FIXME Verify authentication, not sure how
        return None

    def parselinks(self,links):
        rels = {}
        for l in links:
            if 'href' in l and 'rel' in l:
                rels[l['rel']] = l['href']
        return rels

    def testNewDocument(self):
        fondsdata = {
            "title"           : "Title of the test fonds",
            "description"     : "Description of the test fonds",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "documentMedium"  : "Elektronisk arkiv",
        }
        createfondsrel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkiv/'
        if createfondsrel not in self.rels:
            self.failure("unable to create a new fond, no ny-arkiv entry discovered")
            return
        createfondsurl = self.rels[createfondsrel]
        (c, res) = self.json_post(createfondsurl, fondsdata)
        fondinfo = json.loads(c)
        fondid = fondinfo['systemID']
        self.verify(fondid is not None, "created fond")
        self.verify(201 == res.code, "fond creationg returned HTTP code 201")
        linkrefs = self.parselinks(fondinfo['_links'])
        self.verify('self' in linkrefs, "_links in response from fond creation should include 'self' reference")

        seriesdata = {
            "title"           : "Title of the test series",
            "description"     : "Description of the test series",
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "documentMedium"  : "Elektronisk arkiv",
        }
        createseriesrel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-arkivdel/'
        if createseriesrel in linkrefs:
            self.success("_links in response from fond creation include '%s' reference" % createseriesrel)
            createseriesurl = linkrefs[createserierel]
        else:
            self.failure("_links in response from fond creation missing '%s' reference" % createseriesrel)
            createseriesurl = 'hateoas-api/arkivstruktur/arkiv/%s/ny-arkivdel' % fondid
        (c, res) = self.json_post(createseriesurl, seriesdata)
        serieinfo = json.loads(c)
        serieid = serieinfo['systemID']
        self.verify(serieid is not None, "created serie")
        linkrefs = self.parselinks(fondinfo['_links'])
        self.verify('self' in linkrefs, "_links in response from serie creation should include 'self' reference")

        filedata = {
            "fileId"          : "2006/01",
            "officialTitle"   : "Public title of the test file",
            "title"           : "Title of the test file",
            "description"     : "Description of the test file",
            "keyword"         : ["keyword 1", "keyword 2", "keyword 3"],
            "oppbevaringsted" : [ "location 1", "location2", "location3" ],
            "documentMedium"  : "Elektronisk arkiv",
        }
        createfilerel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-mappe/'
        if createfilerel in linkrefs:
            self.success("_links in response from serie creation include '%s' reference" % createfilerel)
            createfileurl = linkrefs[createfilerel]
        else:
            self.failure("_links in response from serie creation missing '%s' reference" % createfilerel)
            createfileurl = 'hateoas-api/arkivstruktur/arkivdel/%s/ny-mappe' % serieid
        (c, res) = self.json_post(createfileurl, filedata)
        fileinfo = json.loads(c)
        fileid = fileinfo['systemID']
        self.verify(fileid is not None, "created file")
        linkrefs = self.parselinks(fondinfo['_links'])
        self.verify('self' in linkrefs, "_links in response from file creation should include 'self' reference")

        recorddata = {
        }
        createrecordrel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-registrering/'
        if createrecordrel in linkrefs:
            self.success("_links in response from file creation include '%s' reference" % createrecordrel)
            createrecordurl = linkrefs[createrecordrel]
        else:
            self.failure("_links in response from file creation missing '%s' reference" % createfilerel)
            createrecordurl = 'hateoas-api/arkivstruktur/mappe/%s/ny-registrering' % fileid
        (c, res) = self.json_post(createrecordurl, recorddata)
        recordinfo = json.loads(c)
        recordid = recordinfo['systemID']
        self.verify(recordid is not None, "created record")
        linkrefs = self.parselinks(fondinfo['_links'])
        self.verify('self' in linkrefs, "_links in response from record creation should include 'self' reference")

        docdescdata = {
            "dokumenttype"    : "type dokument",
            "dokumentstatus"  : "status of document",
            "title"           : "Title of the test document description",
            "tilknyttetRegistreringSom" : "Associated with record as"
        }
        createdocdescrel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentbeskrivelse/'
        if createdocdescrel in linkrefs:
            self.success("_links in response from record creation include '%s' reference" % createdocdescrel)
            createdocdescurl = linkrefs[createdocdescrel]
        else:
            self.failure("_links in response from record creation missing '%s' reference" % createrecordrel)
            createdocdescurl = 'hateoas-api/arkivstruktur/registrering/%s/ny-dokumentbeskrivelse' % recordid
        (c, res) = self.json_post(createdocdescurl, docdescdata)
        docdescinfo = json.loads(c)
        docdescid = docdescinfo['systemID']
        self.verify(docdescid is not None, "created document description")
        linkrefs = self.parselinks(fondinfo['_links'])
        self.verify('self' in linkrefs, "_links in response from docdesc creation should include 'self' reference")

        docobjdata = {
            "versjonsnummer"  : 1,
            "variantformat"   : "Arkivformat",
            "format"          : "PDF",
            "formatDetaljer"  : "PDF/A PDFv1.4",
        }
        createdocobjrel = \
            'http://rel.kxml.no/noark5/v4/api/arkivstruktur/ny-dokumentobjekt/'
        if createdocobjrel in linkrefs:
            self.success("_links in response from docdesc creation include '%s' reference" % createdocobjrel)
            createdocobjurl = linkrefs[createdocobjrel]
        else:
            self.failure("_links in response from docdesc creation missing '%s' reference" % createdocobjrel)
            createdocobjurl = 'hateoas-api/arkivstruktur/dokumentbeskrivelse/%s/ny-dokumentobjekt' % docdescid
        (c, res) = self.json_post(createdocobjurl, docobjdata)
        docobjinfo = json.loads(c)
        docobjid = docobjinfo['systemID']
        self.verify(docobjid is not None, "created document object")
        linkrefs = self.parselinks(fondinfo['_links'])
        self.verify('self' in linkrefs, "_links in response from docobj creation should include 'self' reference")

    def runtests(self):
        try:
            baseref = self.testBasis()
            try:
                self.login()
                self.gotlogin = True
                self.success("able to log in using admin/password")
            except urllib2.HTTPError, e:
                self.gotlogin = False
                self.failure("unable to log in, operating in read only mode")
            self.discover()
            self.testNewDocument()
        finally:
            print "%d successes, %d failures" % (self.success_count,
                                                 self.failure_count)
def main():
    t = Noark5Tester()
    t.runtests()

if __name__ == '__main__':
    main()

#!/usr/bin/python
"""

Connect to the REST API of a Noark 5 service and check that it behaves
as it should.

"""

import json
import mechanize
import urlparse
import urllib2

class Endpoint:
    def __init__(self, baseurl):
        self.baseurl = baseurl
        self._browser = mechanize.Browser()

    def expandurl(self, path):
        return urlparse.urljoin(self.baseurl, path);

    def login(self, username = 'admin', password = 'password'):
        url = self.expandurl('login')
        print url
        self._browser.open(url)
        self._browser.select_form(nr=0)
#        self._browser.form.set_all_readonly(False)
        self._browser['username'] = username
        self._browser['password'] = password
        self._browser.submit()
        html = self._browser.response().read()

    def json_post(self, path, data):
        url = self.expandurl(path)
        print url
        headers = {
            'Content-Type': 'application/vnd.noark5-v4+json',
        }
        jsondata = json.dumps(data)
        request = urllib2.Request(url, jsondata, headers)
        response = self._browser.open(request).read()
        return response

    def json_get(self, path):
        url = self.expandurl(path)
        print url
        headers = {
            'X_REQUESTED_WITH' :'XMLHttpRequest',
            'Accept' : 'application/json, application/vnd.noark5-v4+json, text/javascript, */*; q=0.01',
            }
        request = urllib2.Request(url, None, headers)
        response = self._browser.open(request).read()
        return response

class Noark5Tester (Endpoint):
    baseurl = "http://127.0.0.1:8092/noark5v4/"

    def __init__(self):
        Endpoint.__init__(self,self.baseurl)
        self.success_count = 0
        self.fail_count = 0
    def success(self, msg):
        print "success: " + msg
        self.success_count += 1
    def testArkiv(self):
        a = self.json_get("hateoas-api/arkiv")
        print a
        self.success("found arkiv")
    def testArkivDel(self):
        ad = self.json_get("hateoas-api/arkivdel")
        print ad
        self.success("found arkivdel")
    def runtests(self):
        self.login()
        self.testArkiv()
        self.testArkivDel()
        print "%d successes, %d failures" % (self.success_count, self.fail_count)
        

def main():
    t = Noark5Tester()
    t.runtests()

if __name__ == '__main__':
    main()
